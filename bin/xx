#!/usr/bin/perl
# 2du:add compress option to reverse behavior,add maximize option to scale up to widest width multiple within $HWid or hIt up2 $HHit;
use strict;use warnings;use utf8;use v5.10;       # purpose is2scAl all tXt up2 "XxX" (orig nAm B4 mvd2 just 'xx') sIzd squarz (Dfaltng2 2x2,but acepting
use Octology::c8;my($cc,$sz,$sb,$sm,$ss,$ln,$St); #   integer pRamEter 4 lRger scAling)
$cc=Octology::c8->new(  'cmnd' =>  1);my $d8VS='J24LKuni';$sz=2;$sz=shift(@ARGV) if(@ARGV);$sb=$sm=$ss=0; # mAB it wudBgood 2 upd8 this Utl 2 use -w && strict?
for(0 ..  length($cc->{'_Stxt'})  -1){ # nEd2bypas yet prEsrv anyMbeded SKpz && just duplic8 Ech nrml tXt character x $sz thN split /\n/ 2 duplic8 $sz lInez
  if     (       $sm                         ){$ln .= substr($cc->{'_Stxt'},$_,1);
    if   (substr($cc->{'_Stxt'},$_,1) eq  'm'){              $sm  =   0;}}
  elsif  (       $ss                         ){$ln .= substr($cc->{'_Stxt'},$_,1);
    if   (substr($cc->{'_Stxt'},$_,1) eq "\\"){              $ss  =   0;}}
  elsif  (       $sb                         ){$ln .= substr($cc->{'_Stxt'},$_,1);
    if   (substr($cc->{'_Stxt'},$_,1) eq  '['){$sb  =     0 ;$sm  =   1;}
    elsif(substr($cc->{'_Stxt'},$_,1) eq  ']'){$sb  =     0 ;$ss  =   1;}} # need to check ]50;_\ for lsd8 f8 f0ntz
  elsif  (substr($cc->{'_Stxt'},$_,1) eq "\e"){$ln .=   "\e";$sb  =   1; } # start skipping until following bracket
  elsif  (substr($cc->{'_Stxt'},$_,1) eq "\n"){$St .=       "$ln\n"               x $sz;$ln='';}  # skip over somehow
  else                                        {$ln .= substr($cc->{'_Stxt'},$_,1) x $sz;       }} #$cc->{'_Stxt'}=~ s/(\e\[([\d;]*)m)+(.)/$1$3$3/g;
$ln='' unless(defined($ln));$St = "$ln\n" x $sz unless(defined($St));print $St;
