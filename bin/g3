#!/usr/bin/perl
# F4LMJ3HJ:Xpct crE8d by PipStuart <Pip@CPAN.Org> 2fIndbetr altrn8ivz2baktix4mED8d unbufrd subcmndXeQtion,thN was specialIzd as g3 2 wrap `gst123` mEDa plAyer;
# 2du:figure out why high-load misses titl or strt time && drops out after 8 secondz && get it to catch up in that time && proceed normally if possible,
#   fix not to have duplic8 Title...Artist or Album...Genre linez like Codec,try2Dtect SKp kE as othr Xit,mAB Enter helpz unfreeze Time?,
#   colr URLz 4strEmz,add sepR8 colrz in Bitrate (\d+)(\.)(\d+) like Volume: chng,NAbl @PlayList prEVous Ntry with sEmlS rEstRt if such can work,
#   pre-pad Album && Codec linez that don't follow Time to align with Title,redo Time: rowz as dur8 for new Dflt,add 80-column mode,
#   Xtract the qregex keyz && reuse them in sn() for less redundancy && better unific8ion (altho staging complex mAB actually good2keep2),
#   try differNt mode where a key every $to secz or less keepz player running but killd whN $to reachd, stuD wayz2resolv PulseAudio 'flat volume' 4gapless,
#   stRt generalizing all code for wrapping more commandz && maybe alias all the interfacez to ReadKey&&Expect to maybe subclass them as new U8 stuf,
#   stuD cmus whole ntrfAc4 mkng audio library, playlists (without colliding .pl filz! but wi .plf && .m3u at least),&& sepR8 playqueue?, mk vim-like bindngz,
#     tryout && r8 all :colorscheme /usr/share/cmus/*.theme with typical 8 main pal8 settingz && mAB genR8 .Hrc style dense pal8 mapz of each theme's d8a,
#     stuD gapless playback && format options, ckout cmus-remote,find&&stuD cmus-tutorial, stuD Libre.FM GNU scrobbling like cmusfm && zomg does,
#   revive all good old pimp rand rang, r8ng, && mAB volume scaling cmus:"replaygain" && any othr ancient worthwhile stuf from my now ancient zinf fsui dayz;
use strict;use warnings;use utf8;use Octology::a8;my $VERSION='0.0';my $d8VS='K87M8vis'; # consider detecting && adding custom Xtra --help basic tXt output2;
use Term::ReadKey;     # note that you can pass in as many -d=\d+ DelayDur8ionInSeconds (like MPlayer -endpos) for as many file-name params follow 2 B plAyd;
END{      ReadMode 0;} # good practice to auto-restore orig TTY read settingz at END
          ReadMode 3;  # setup 4 raw mode or 3 cbreak mode where Ctrl-C workz since signalz are enabled
$ENV{'TERM'}='linux';  # this is needed for arrow cursor keyz to get interpreted properly (vt100 does not do it)
use    Encode;open my $out8,'>&',STDOUT or die "Can't open  duplic8 STDOUT handle: $!";binmode $out8,':encoding(UTF-8)'; # crE8 local duplic8 of global
use    Expect;my $cm='gst123';my $to= 2;my $so=0.3;my $tS=0;$tS=1 if(-t STDIN);my @pl; # CoMand strng, TimeOutsecz, SelectOutflsecz, ttySTDIN?, @PlayList
my %kr=('u'=>"\e[A" ,'d'=>"\e[B" ,'r'=>"\e[C",'l'=>"\e[D", # arOkEz working,Yay! `man 5 terminfo`UDRL=>cuu1,cud1,cuf1,cub1`v=$(tput cuu1)` `printf '%q\n' "$v"`
        'z'=>"\e[6~",'a'=>"\e[5~",'w'=>'+','s'=>'-','>'=>'n','h'=>'?','p'=>' ',chr(127)=>'m',"\n"=>'n',';'=>'f','v'=>'1','x'=>'q');my @dscz; # KeyzRemap
my $ksst=0;while(@ARGV && $ARGV[0]=~ /^-*d?[=:]?(\d+)$/i){push(@dscz,$1 );shift(@ARGV  );} # -sKipSecondsStartTime, Dur8ionSeCZ, && BlO shift paramz4cmd
my $xp=Expect->new();my @pr;my $si='';my $cs ='';my $lt ='';if(@ARGV){@pr=@ARGV;@ARGV=();} #eXPectobj,PaRamz,StndrdIn,CodecStrng 2ck4dupz,LastTime 2padCodecz
my $nnxt=0;my $gorl='';my $auvz=0    ;my $ts ='';my $as =''; # Next-NeXTflag, GoomOriginalReloc8Line,AUtom8dViZualiZ8ion Title..artistString,Album..genreString
my $Vnam=''; # Visualiz8ion plugin NAMe string as key into l8r namez hash for re-ordering && accepting optional indicez for Vis plug-inz in addition to namez;
for(1..$#pr){if($pr[$_-1]=~ /^-*v(isualiz8?a?t?ion)?\s*$/i && # default try to auto-spawn good lib-visual actor plug-in or Xpand solo NdX pRamz;
                $pr[$_  ]=~ /^([0-9A-Z]|\s*(mono|space|spectra|synae|wave)scope|goom(2k1)?|(libvisual_)?(lv_(analyzer|scope))?
                  (jess|bumpscope|corona|infinite|jakdaw|lv_analyzer|lv_scope|oinksie))$/ix){my $vprm=$1; # would be slick to mk -v syntax like -d but bad p@rn
    if(length($vprm) ==1){my @Vz=split(/\n/,`gst123 -V|cut -d' ' -f1`);($Vz[1],$Vz[2],$Vz[3],$Vz[ 4],$Vz[ 5])=($Vz[2],$Vz[3],$Vz[ 4],$Vz[ 5],$Vz[1]); # goom dn
                                                                       ($Vz[7],$Vz[8],$Vz[9],$Vz[10],$Vz[11])=($Vz[8],$Vz[9],$Vz[10],$Vz[11],$Vz[7]); # jess dn
      $pr[$_]=$Vz[$sb10{$vprm}];} # try to replace indicez of lib-viz actor plug-inz to map longnamz
    $auvz=1;}} # below should insert the indexed viz name when option to hopefully just need to provide b64 indices instead of full namez
  # since each new track restores the default geometry of whatever the lib-viz window is stealing focus from elsewhere (intolerable), so don't dfault Lv izual;
#nless($auvz){push(@pr,'-v','libvisual_infinite');}#goom2k1');} # change the default actor plug-in name here if another becomez more desired;
#push(@pr,';echo','8_eNNd_8');$cm.=' '.join(' ',@pr); # Expect seemz2B %20%3B like URL escaping my @pr with spacez && semiz so joining 4just sclr
my $ht ="==================== gst123 keyboard commands =========================== => =================== g3 kybd cmdz ===========================
    l / r or cursor left/right  -  seek 10 seconds  backwards/forwards    ;    p or     space  -  toggle pause  # XtraXpect kyz du!wrk4vizwndOz
    d / u or cursor down/up     -  seek 1  minute   backwards/forwards    ;    m or backspace  -  toggle mute/unmute
    z / a or page   down/up     -  seek 10 minutes  backwards/forwards    ;    f or semicolon  -  toggle fullscreen (only for videos)
    w / s or + / -              -  increase/decrease     volume by 10%    ;    1 or v          -  normal video size (only for videos)
    n     or >   or      enter  -  play next file                         ;  # should try to add prev file by tracking params && restart?
    h     or ?                  -  this help                              ;    q or x          -  quit (exit) g3
========= -V == Vizualiz8ionz == == can be provided merely by single ... === b64 index below == == txt .help. reordrng actors list ======";   # HelpText wIde
if(exists($ENV{'COLUMNS'}) && $ENV{'COLUMNS'} < 138){$ht ="==================== gst123 keyboard commands =>
                  =>   g3     kybd     cmdz   ========================
    l / r or cursor left/right  -  seek 10 seconds  backwards/forwards
    d / u or cursor down/up     -  seek 1  minute   backwards/forwards
    z / a or page   down/up     -  seek 10 minutes  backwards/forwards
    w / s or         +  /  -    -  increase/decrease     volume by 10%
    m     or         backspace  -  toggle mute/unmute
    p     or             space  -  toggle pause
    f     or         semicolon  -  toggle fullscreen (only for videos)
    1     or        v           -  normal video size (only for videos)
    n     or        > or enter  -  play next file
    h     or        ?           -  this help
    q     or        x           -  quit (exit) g3
======================================================================";} # HelpText normal narrow 80-column (actually < 138 && hopefully >= 70 for now)
$ht=~ s/(;)/$Y$1/g;$ht=~ s/\/ -/\/ $R-/;$ht=~ s/ (-)/ $Y$1/g;$ht=~ s/ (10)/ $G$1/g;$ht=~ s/ (1) / $o$1 /g;$ht=~ s/(\%)/$Y$1/;$ht=~ s/\+/$G+/; #   thorOcolrz
$ht=~s/(l )\/( r)/$Y$1\/$R$2/;$ht=~s/(d )\/( u)/$M$1\/$G$2/;$ht=~s/(z )\/( a)/$P$1\/$g$2/;$ht=~s/(w )\/( s)/$G$1\/$R$2/;$ht=~s/(enter)/$M$1/g;
$ht=~ s/(==+            )/$r$1/gx;$ht=~ s/(up        )/$G$1/gx;$ht=~ s/(page  )/$P$1/gx;$ht=~ s/(toggle    )/$B$1/gx;$ht=~ s/ (n) / $M$1 /;
$ht=~ s/(=>             )/$Y$1/gx;$ht=~ s/(seek      )/$z$1/gx;$ht=~ s/(volume)/$M$1/gx;$ht=~ s/(pause     )/$M$1/gx;$ht=~ s/ (m) / $R$1 /;
$ht=~ s/(g(st12)?3      )/$G$1/gx;$ht=~ s/(seconds?  )/$M$1/gx;$ht=~ s/(by    )/$r$1/gx;$ht=~ s/(unmute    )/$B$1/gx;$ht=~ s/ (f) / $C$1 /;
$ht=~ s/(ke?yb(oar)?d   )/$B$1/gx;$ht=~ s/(minutes?  )/$B$1/gx;$ht=~ s/(play  )/$o$1/gx;$ht=~ s/(  mute    )/$R$1/gx;$ht=~ s/ (q) / $W$1 /;
$ht=~ s/(co?m(man)?d[sz])/$C$1/gx;$ht=~ s/(wards     )/$c$1/gx;$ht=~ s/(next  )/$M$1/gx;$ht=~ s/(fullscreen)/$C$1/gx;$ht=~ s/(\?)/$B$1/g;$ht=~ s/(#)/$C$1/g;
$ht=~ s/(cursor         )/$C$1/gx;$ht=~ s/(back      )/$o$1/gx;$ht=~ s/(file  )/$G$1/gx;$ht=~ s/(only      )/$r$1/gx;$ht=~ s/\//$W\//g;$ht=~ s/(track)/$C$1/g;
$ht=~ s/(left           )/$Y$1/gx;$ht=~ s/(for       )/$G$1/gx;$ht=~ s/(this  )/$c$1/gx;$ht=~ s/(normal    )/$o$1/gx;$ht=~ s/([()])/$Y$1/g;$ht=~s/(semi)/$C$1/;
$ht=~ s/(right          )/$R$1/gx;$ht=~ s/(in)(crease)/$G$1$c$2/gx;$ht=~s/(help   )/$B$1$r/gx ;$ht=~s/(videos?)/$z$1/gx;$ht=~ s/(size)/$c$1/;
$ht=~ s/(down           )/$M$1/gx;$ht=~ s/(de)(crease)/$R$1$c$2/gx;$ht=~s/(backspace)/$R$1/gx ;$ht=~s/(quit   )/$W$1/gx;$ht=~s/ (or) / $w$1 /g;
$ht=~ s/ (>) / $M$1 /;$ht=~ s/ (h) / $B$1 /;$ht=~ s/ (v) / $o$1 / ;$ht=~   s/ (space) / $M$1 /;$ht=~s/ (p) / $M$1 /;$ht=~s/(exit)/$W$1/gx;$ht=~s/ (x) / $W$1 /;
$xp->debug(       0);$xp->raw_pty(     1); # raw_pty doez need 2B B4 spawn along wi proly mOst optnz
$xp->exp_internal(0);$xp->log_stdout(  0); # setup object BhAvior  # setng notrns(1) BlO wil!DlEt matchzfrom aQmUl8or,Dflt:0; 1 gOzwi (set|clear)_accum()
#xp->notransfer(  0);$xp->restart_timeout_upon_receive(1); # NAblng rEstRt_tImout_upon_rECv shudlet g3 plyr liveon aslong astImr upd8z continU2prnt
$xp->spawn($cm, @pr) or die "Cannot spawn $cm: $!\n";sleep(1);#xp->slave->stty(qw(sane));#raw -echo));#sane)); # mIt nEd2add custom Stty setngz4DsIrdBhAvior
sub sn{my $ns=shift||'';$ns=decode('UTF-8',$ns);$ns=~ s/\n+/\n/g; # StripNewlinez (&& had altrn8 |\r 4retrnz&&othr spacez && majorly rE4m@stuff)
  $ns=~ s/(Opus)/$M$1                            /g; # for some reason, altern8ion above between same newlinez causes Time upd8 probz when single,Idu!knO Y!
  $ns=~ s/(Free)( Lossless)( Audio)( Codec)/$Y$1$G$2$P$3$B$4/g;               $ns=~ s/(\()(F)(L)(A)(C)(\))/$o$1$Y$2$G$3$P$4$B$5$o$6/g;
  $ns=~ s/(M)(PEG)(-)(1)( Layer)( 3)/$R$1$M$2$W$3$o$4$z$5$G$6            /g;  $ns=~ s/(\()(M)(P)(3)(\))/$o$1$R$2$M$3$G$4$o$5/g;
  $ns=~ s/(MPEG)(-)(4)( AAC)/$R$1$Y$2$G$3$P$4                      /g;        $ns=~ s/(Vorbis)/$M$1                          /g;
  $ns=~ s/(Uncompressed)( 16)(-)(bit)( PCM)( audio)/$M$1$Y$2$C$3$B$4$R$5$P$6   /g;$ns=~ s/(W)(M)(A)( Version)( 8)/$K$1$Y$2$P$3$c$4$G$5                   /g;
  my $mf=0;my $pf=0;$mf=1 if($ns=~ s/(\[MUTED\])//g);$pf=1 if($ns=~ s/(\[PAUSED\])//g);$ns=~ s/(\()(audio)(\))/$Y$1$C$2$Y$3/gi;
  if    ( $ns=~  /(^|\s*)(Play)(ing )(file|http)(:)(\/\/)([^\n]+)(\n|$)/i){push(@pl,$7);my $cf=c8fn($7);my $f=$7;my $pt='plA '; # set C8Filename,File,&&PlayTxt
          if($4 eq 'file'){$cf=~ s/%20/ /g;$cf=~ s/%C3%B4/ô/g;$cf=~ s/%C3%A9/é/g;$cf=~ s/%C3%B6/ö/g;$cf=~ s/%C3%BF/ÿ/g;$cf=~ s/%C3%BC/ü/g;}
          $ksst=0; # reset sKipSecsStrtTime at Ech new fIl plAyd, && abov just special for Fanto,Pepe,Bjork,Qrych,&&Crux but l8r should generalize
          $pt='' if(148 < length($f) && length($f) < 154); # rEstor fIl spAcez nstd of URL SKpz && no 'plA ' 4file2fit line
          $ns=~ s/(^|\s*)(Play)(ing )(file|http)(:)(\/\/)([^\n]+)(\n|$)/\n$Y$pt$G$4$W$5$o$6$cf\n/gi;}
  elsif ( $ns=~  /.*?(\s*)(Title)(\s*:)([^\n]+)(\n|$)/i){my $ts=$4;$ts=~ s/\s*(Artist)/ $1/;if($ts=~ /^(.+?)Artist/){my $as=''; #AlinSpcz
                                                            $as= ' ' x (45 - length($1)) if(length($1) < 45);
                                                            $ts=~ s/(Artist  )(:)(.*?)(\s*)$/$as$Y$1$W$2$z$3/gi;} # split apart 2nd meta-d8a field on line
          $ns=~ s/.*?(\s*)(Title)(\s*:)([^\n]+)(\n|$)/ $G$2$W$3$R$ts\n/gi;}
  elsif ( $ns=~  /.*?(\s*)(Album)(\s*:)([^\n]+)(\n|$)/i){my $ts=$4;$ts=~ s/\s*(Genre)/ $1/ ;if($ts=~ /^(.+?)Genre/ ){my $as=''; #AlinSpcz
                                                            $as= ' ' x (45 - length($1)) if(length($1) < 45);
                                                            $ts=~ s/(Genre   )(:)(.*?)(\s*)$/$as$C$1$W$2$R$3/gi;} # split apart 2nd meta-d8a field on line
          $ns=~ s/.*?(\s*)(Album)(\s*:)([^\n]+)(\n|$)/ $M$2$W$3$B$ts\n/gi;}
  elsif ( $ns=~  /.*?(\s*)(Volume)(:\s*)(\d+)(\.)(\d+)(\%)[^\n]*(\n|$)/i){ # pad colon to align with all other 8-char-wide field namez
          $ns=~ s/.*?(\s*)(Volume)(:\s*)(\d+)(\.)(\d+)(\%)[^\n]*(\n|$)/ $M$2$W  $3$G$4$R$5$C$6$Y$7\n/gi;}
  elsif ( $ns=~  /.*?(\n*)(Codec)(\s*:)([^\n]+)(\n|$)/i){my $tb=$4;$tb=~ s/\s*(Bit)(rate )(:)(.*?)( \w)(bit)(\/)(s).*/    $o$1$R$2$W$3$M$4$C$5$B$6$Y$7$M$8/gi;
    my $tc;#f($cs && $cs eq "$2$3$4$5"){$tc=$B."\nCodec$R"."Dup\n";}else{$cs="$2$3$4$5";$cs=~ s/\s*$/\n/;$cs=~ s/\s*Bitrate :.*/$tb/i;}
    if(defined($tc)){
          $ns=~ s/.*?(\n*)(Codec)(\s*:)([^\n]+)(\n|$).*/\n$tc/gi;} # try to skip out any surrounding Time: linez
    else {$ns=~ s/.*?(\n*)(Codec)(\s*:)([^\n]+)(\n|$).*/ $B$2$W$3$tb$5/gi;}} # For Vonikk-HardAttack.mp3 Codec follows Title instead of Time =(
  elsif ( $ns=~  /(.*?)(scope|goom|libvisual)(.*)(\n)/i){ # detect -V Visualiz8ion plugins Bing listed (shouldn't matter if they dump on STDERR,not STDOUT)
       my %nz=(    'monoscope' => 0, 'goom'                => 5, 'libvisual_jakdaw'      => 10,
                  'spacescope' => 1, 'goom2k1'             => 6, 'libvisual_jess'        => 11,
                'spectrascope' => 2, 'libvisual_bumpscope' => 7, 'libvisual_lv_analyzer' => 12,
                  'synaescope' => 3, 'libvisual_corona'    => 8, 'libvisual_lv_scope'    => 13,
                   'wavescope' => 4, 'libvisual_infinite'  => 9, 'libvisual_oinksie'     => 14,);
          if($ns=~  /^\s*(\S+)/){$Vnam=$1;}
          if($ns=~  /^(goom   \s+GOOM[^\n]+\n)$/x){$gorl=$1;$ns=~ s/^(goom   \s+GOOM[^\n]+\n)$//;$gorl =$U . $sb64[$nz{'goom'          }] . "$B $gorl" .
                                                                                                        $U . $sb64[$nz{'goom2k1'       }] . "$B "     ;}
          if($ns=~  /^(goom2k1\s+GOOM[^\n]+\n)$/ ){         $ns=~ s/^(goom2k1\s+GOOM[^\n]+\n)$/$gorl$1/;  # do some re-ordring B4 catching 'what a' ! && 2k1;
                                                            $ns=~ s/ (2)(k)(\d)/$U$1$D$2$S$3/gix;} $ns=~ s/(edition)/$g$1/g;
          if($ns=~  /^(libvisual_jess[^\n]+\n)$/x){$gorl=$1;$ns=~ s/^(libvisual_jess[^\n]*\n)$//;$gorl =$U . $sb64[$nz{'libvisual_jess'}] . "$B $gorl";}
          if($ns=~  /^(libvisual_jakd[^\n]+\n)$/ ){         $ns=~ s/^(libvisual_jakd[^\n]+\n)$/$1$gorl/;} # do some re-ordring of jess to follow jakdaw also;
          $ns=~ s/(\.?)(0)(\.|$)/$C$1$o$2$S$3/g;$ns=~ s/(libvisual )libvisual /$1/g ;$ns=~ s/(bump)/$B$1/gi;$ns=~ s/(:.*)(what)\s(a)/$c$1$w$2 $o$3/gi;
          $ns=~ s/(\.?)(1)(\.|$)/$W$1$B$2$D$3/g;$ns=~ s/(plugin \s )plugin \s /$1/gx;$ns=~ s/(_)(analyzer)/$1$G$2/;$ns=~ s/([!])/$O$1/g;$ns=~ s/([:])/$c$1/g;
          $ns=~ s/ (monoscope)(\s\s\s)/$2$1/x;$ns=~ s/(\s{15})(   Monoscope)    /$1$1$2/x;$ns=~ s/(\sjess    \s)/$d$1     /x;$ns=~ s/(\sv)(\.?)/$r$1$Y$2/g ;
          $ns=~ s/(spacescope)(  \s\s)/$2$1/x;$ns=~ s/(\s    )(oscilloscope)/$1$1$1$1$2/x;$ns=~ s/(\scorona  \s)/$r$1   /x  ;$ns=~ s/(\sJakdaw\s)/$N$1   /x;
          $ns=~ s/(synaescope)(  \s\s)/$2$1/x;$ns=~ s/(\s{14})(  Synaescope)    /$1$1$2/x;$ns=~ s/(\sinfinite\s)/$W$1 /x    ;$ns=~ s/(  jakdaw\s)/$N$1/x   ;
          $ns=~ s/ (wavescope)(\s\s\s)/$2$1/x;$ns=~ s/(\sscope)(\splugin   )/    $1$2/x  ;$ns=~ s/(\soinksie \s)/$o$1  /x   ;$ns=~ s/(  oinksie \s)/$o$1/x ;
          $ns=~ s/(.*?)(scope               )/$Y$1$S$2$C/gix;$ns=~ s/(isual)(_)/$1$R$2$c/g ;$ns=~ s/(lv)(_)/$O$1$U$2/g;
          $ns=~ s/(.*?)(      goom          )/$Y$1$g$2$C/gix;$ns=~ s/(\splugin)    /$p$1/gx;$ns=~ s/( analyzer)/$G$1 /;
          $ns=~ s/(.*?)(           libvisual)/$Y$1$M$2$C/gix;$ns=~ s/(corona   )/$r$1/;$ns=~ s/(infinite  )/$W$1/g;$ns=~ s/(jess  )/$d$1/;$ns=~ s/(\n)/$z$1/g;
          $ns=  $U . $sb64[$nz{$Vnam}] . $B . ' ' . $ns if(exists($nz{$Vnam}) && $Vnam!~ /(goom|jess)/);} # try2force prEpNd proper Vis aftr rot8z;
  elsif ( $ns=~  /==+\s+gst123\s+keyboard\s+commands\s+==+(\n)/i){ # detect help output   # mIt need to decode below output if any UTF-8 gets used l8r
          $ns=~ s/==+\s+gst123\s+keyboard\s+commands\s+==+(\n)/\n$ht\n/i;my $gV=`g3 -V`;  # try calling out a sub-shell to another self just for trailing help;
#   my @Vz=split(/\n/,$gV);for my $Vn(0..$#Vz-1){$ns.="$U$sb64[$Vn]$B $Vz[$Vn]$z\n" if(defined($Vz[$Vn]) && length($Vz[$Vn]) && $Vz[$Vn]=~ /\S+/);}
    $ns.=$gV;}
  elsif ( $ns=~  /.*?(\n?)(Time)(:.*Time:\s*)(\d+:\d+:\d+\.\d+).*( of )(\d+:\d+:\d+\.\d+)\s*?(\n|$)/i){my $tn=$4;my $tt=$6; # break d8 fieldz
          $tn=~        s/(\d+)(:)(\d+)(:)(\d+)(\.)(\d+)/$U$1$W$2$D$3$W$4$S$5$Y$6$N$7/g;         my $Sc="\e[16G"; # mv2colm16,erase cursor2BoL&&mv2 1stcolumn
    unless($ksst){$ksst=3600*$1+60*$3+$5;} # atMpt2set whatevr init stRt tIm cudB Dtectd first aftr audio playing has begun
    if    (@dscz &&     3600*$1+60*$3+$5 >= $ksst+$dscz[0]-1){shift(@dscz);$nnxt=1;$ksst=0;}
          $tt=~        s/(\d+)(:)(\d+)(:)(\d+)(\.)(\d+)/$U$1$W$2$D$3$W$4$S$5$Y$6$N$7/g;            $Sc="\e[?25l\e[1G"; # try2hide cursor
                                                                                                 # $Sc.="\e[1K\e[1G"; # try2not erase,justHome?
          $ns=~ s/(^|\s*)(Time)(:.*Time:\s*)(\d+:\d+:\d+\.\d+).*( of )(\d+:\d+:\d+\.\d+)\s*?(\n|$)/$Sc$o$2$W: $tn$c$5$tt/gi; #\e[31G\e[?25h/gi;
                                                                                              $lt="$Sc$o$2$W: $tn$c$5$tt";}
          # tryd2mv cursor2Nd 31 2kEpdrwn butstil flashd blankz til no erase, now trying to hide B4 && unhide cursor at Nd
  elsif ( $ns=~  /.*(Time)(:\s*)(\d+:\d+:\d+\.\d+)/i){my $tn=$3; # break d8 fieldz
          $tn=~        s/(\d+)(:)(\d+)(:)(\d+)(\.)(\d+)/$U$1$W$2$D$3$W$4$S$5$Y$6$N$7/g;         my $Sc="\e[16G"; # mv2colm16,erase cursor2BoL&&mv2 1stcolumn
                                                                                                   $Sc="\e[1G" ; # .="\e[1K\e[1G"; no more erase2Bgin-of-Line
          $ns=~ s/.*(Time)(:\s*)(\d+:\d+:\d+\.\d+)\s*/$Sc$o$1$W: $tn/gi;} # make Time: without 'of' end for HTTP MP3 streams
          $ns.="\e[0K" if($mf || $pf);$ns.="$Y [$R". "MUTED$Y]" if($mf);$ns.="$G [$M"."PAUSED$G]" if($pf);
  return( $ns);} # StripNewlinez($NewlinezStripped) && alsO doez a bunch of rE4m@ing && colr8ion now2
sub mp{my $cx=shift;my $cb=$cx->before();my $ct=$cx->match();my $ca=$cx->after();$cb=~ s/^\s+//;$ct=~ s/^\s+//; # MatchPrint (or Patternz)
  if($ct=~ s/((^|\n*)Codec[^\n]*)\n+/$1\n/i){if($cs && $cs eq $1){$ct="";#$lt$W:$c"."af$W:".":$B"."b4$W:".":$M"."mt$W:$B"."Codec$R"."Dup\n";
  }else{$cs=$1;}}
  if($ct=~ s/((^|\n*)Title[^\n]*)\n+/$1\n/i){if($ts && $ts eq $1){$ct="";}else{$ts=$1;}} # try to stifle other dupz as well
  if($ct=~ s/((^|\n*)Album[^\n]*)\n+/$1\n/i){if($as && $as eq $1){$ct="";}else{$as=$1;}}
  if(defined($cb)){if($cb=~ /(==+\s+gst123\s+keyboard\s+commands\s+==+|.*?(before|cursor|seek|toggle|volume|normal|next|quit)[^\n]*|==+)\n/i){$cb='';}
                   if($ct=~ /(==+\s+gst123\s+keyboard\s+commands\s+==+|Title\s+:[^\n]*                                                )\n/ix){$cb='';}
    if($ct=~  /^(Title)/i){$cb=~s/(^\s*?\n|\s+$)//g;}
    if($ct=~ s/^\s*(Ti(m|tl)e:?|Playing|Codec)/$1/i){$cb='' if($ct=~ /^Playing/i);}else{print $out8 $G;}}else{$ct=~s/^\s*(Time:)/$1/i;}$ca=~s/^\s*(Time:)/$1/i;
    $cb=sn($cb);$cb=~ s/(\n|\r)+//g;$cb='' if($ct=~  /Codec/i);
  #rint($B."b4$W:$G".   $cb ."$W:") if(defined($cb));$ct=~ s/^(\s*(Time:[^\n]+?)\n.*Time:[^\n]+?\n)/$2\n/gi;$ca=~ s/\s*(Codec)/\n$1/gi;$ct=~ s/^\s+//;
  print $out8 "\e[0K" if($cb!~  /(PAUS|MUT)ED/);
  #rint($M."mt$W:$C".sn($ct)."$W:") if(defined($ct));                                                       $ca=~ s/(^\s|\n|\r)+//g; $ca='';
  #rint($c."af$W:$C".sn($ca)."$W:") if(defined($ca));
 #print(              " $cb"      ) if(defined($cb) && $cb=~ /((MUT|PAUS)ED)/);
                                                     $ct=~ s/^(\s*(Time:[^\n]+?)\n.*Time:[^\n]+?\n)/$2\n/gi;$ca=~ s/\s*(Codec)/\n$1/gi;$ct=~ s/^\s+//;
                                                     $ct= sn($ct);$ct=~ s/^\n// if($ct=~ /(plA )?(\e\[[\d;]*m)*(file|http)(\e\[[\d;]*m)*:/ && @pl < 2);
  print $out8        "$C$ct"        if(defined($ct));                                                       $ca=~ s/(^\s|\n|\r)+//g; $ca='';
  print $out8     $R.sn($ca)        if(defined($ca)); } # MatchPrint
sub cb{my $cx=shift;$si=''; # CallBack for non-stream Time A of B
  if(-t STDIN){$si=ReadKey($so);if(defined($si) && $si eq "\e"      ){$_=ReadKey(-1);$si.=$_ if(defined($_));
      if                                          ($si eq "\e["     ){$_=ReadKey(-1);$si.=$_ if(defined($_));
        if                                        ($si =~ /\e\[[56]/){$_=ReadKey(-1);$si.=$_ if(defined($_));}}}}
                                           $si='' unless(defined($si));mp($cx);my $zi=$si;$zi=~ s/\e/SKp/g; # should also send Ctrl-C break SIGINT thru
       if($nnxt){$nnxt=0;$cx->send('n');} # initE8 Quit out key passd as input if sKip SStrtTm+Dur8nSeCz was surpassed so nXt-NeXT was flagd
       if   (length($si) && $si=~ /^([-+q m?f1n]|\e\[[ABCDFH56]~?)$/i){         #rint $G."Dflt$K"."Keyz$W:$Y$zi$W;\n" if($zi=~  /SKp/);
                                                 $cx->send(    $si );} # regUlRpassthru keyz
       elsif(length($si) &&  exists($kr{$si})){my $zr=$kr{$si};$zr=~ s/\e/SKp/g;#rint $o."Remp$C"."Keyz$W:$Y$zi$W:$R$zr$W;\n";
                                                 $cx->send($kr{$si});} # try2rEmap arOw keyz  # any Othr unDtectd keyz shud prnt out 4l8r altern8 mapz
       elsif(length($si) &&     ord($si) == 3){                                 #rint $M."Ord3$G"."Keyz$W:$Y$zi$W;\n";
                                                 $cx->send(    $si );} # try2pass Ctrl-C break thru
       elsif(length($si)                     ){                                 #rint $B."Othr$K"."Keyz$W:$Y$zi$W;\n";
                                                                     }                                           exp_continue;}
sub xx{ $xp->expect($to, [qr/(^|\s*)Playing\s+(file|http):\/\/[^\n]+\n/i            => sub {my $cx=shift;mp($cx);exp_continue;}],
                         [qr/(^|\s*)Title\s*:[^\n]+\n/i                             => sub {my $cx=shift;mp($cx);exp_continue;}],
                         [qr/(^|\s*)Album\s*:[^\n]+\n/i                             => sub {my $cx=shift;mp($cx);exp_continue;}],
                         [qr/(^|\n*)Codec\s*:[^\n]+\n/i                             => sub {my $cx=shift;mp($cx);exp_continue;}],
                         [qr/(^|\s*)Volume:[^\n]+\n/i                               => sub {my $cx=shift;mp($cx);exp_continue;}],
                         [qr/(^|\s*)(.*?(scope|goom|libvis).*[^\n]+)\n/i            => sub {my $cx=shift;mp($cx);exp_continue;}],
                         [qr/==+\s+gst123\s+keyboard\s+commands\s+==+\n/i           => sub {my $cx=shift;mp($cx);exp_continue;}],
                         [qr/(^|\s*)Time:.*Time:\s*[:0-9.]+ of [:0-9.]+\s*/i        => \&cb],         # ref2 CallBack() for non-stream Time A of B
                         [qr/(^|.*)Time:\s*[:0-9.]+\s*/i                            => \&cb]);} xx(); # ref2 CallBack()  ,@cp @CbParamz (old)
$xp->soft_close(); # close hndl (soft w8z 15secz but usually finishz sooner)
print   $out8 "\e[?25h"; # return cursor visibility (unHide)
close   $out8             or die "Can't close duplic8 STDOUT handle: $!";
