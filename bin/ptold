#!/usr/bin/perl -w
# pt (PackTime) is a simple tool created to en/decode the date && time.
#   It used to be called PipTime in it's original incarnation which was
#    created 1L7Mu (an all-nighter) =).  The separate character fields are:
#     (Year-2001)*12+Month, Day, Hour, Minute, Second
# The pt mechanism can uniquely encode any date && time (down to seconds)
#  between Dec 1, 2000 (`pt 01`) && midnight Mar 31, 2006 (`pt _VNxx`)
#       Note: `pt 01`    == localtime(975657600) # seconds since Epoch
#             `pt 1L7Mu` == unpack time (Sun Jan 21 07:22:56 2001)
#             `pt _VNxx` == localtime(1143878399) last Fri Mar 31 23:59:59 2006
#             `pt pt`    == unpack current pt (akin to `pt `pt``)
#             `pt e`     == localtime  (eg. Thu Jan 21 07:22:56 2001)
#             `pt e e`   == current epoch seconds
#             `pt 1L7Mu e` == convert from pt to epoch (980090576)
#             `pt 975657600 E` == convert from Epoch seconds to pt (01)
#             `pt Jan 21, 2001 07:22:56`    -> 1L7Mu
#             `pt Sun Jan 21 07:22:56 2001` -> 1L7Mu
#             `pt 1L7Mu cmp FEET0`          -> lt 
#             `pt FEET0 cmp 1L7Mu`          -> gt 
#             `pt 2B cmp 2B`                -> eq
#           timelocal($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)
# Some thoughts: I have considered prepending another character (to make
#   ptimes use 6 characters instead of just 5) so that encodable dates
#   could span well beyond just 2006 but I've concluded that the convenience
#   of not having to write an extra 0 before each pt for the next 4 years
#   is more valuable to me.  My plan is to enhance pt at some point so that
#   once Mar2006 has passed, then a new code (maybe utilizing base128
#   instead of just base64) could be employed for greater compactness &&
#   resolution... maybe all old (ie. now current) ptimes can be converted
#   to the new format then.  The interim solution is to provide functions
#   for converting ptimes to / from Epoch seconds for compatibility with
#   Perl && Unix.  
#  DOBVT - Thinking more, each unique date/time element represented as a
#   separate character is quite valuable so experiment with two main 
#   possibilities before Mar2006.  0) use a new 7 character format with 
#   separate year character && sub-second character (60ths?) && probably 
#   make Months past C add another base (64?) to year field.  1) encode
#   epoch seconds into the highest possible base with easily 
#   distinguishable && typeable characters (base128?) for a general
#   uniform compact format (even though this method forsakes the 
#   simplicity of having each date/time field easily seperable)... 
#   I'm pretty sure option 0 is the better one... also think about using 
#   the 0 format (with separate chars / field) but restart all pt from 
#   the epoch... as option 2.  Maybe implement each && see how they feel =).
# pt has minimal !ERROR! checking so use a real Time module if you need it.
# I like to use brief encoded dates to version things so this lets me quickly
#  choose a duration granularity as my next unique version descriptor.  TTFN.
# All source code should be free!  Code I have authority over is && shall be!
#                                             -Pip@Ax9.org

use strict;
use Time::Local;
my @valz = ( 0..9, 'A'..'Z', 'a'..'z', '.', '_', # 0-63 dayz->V(31) minz->x(60)
    '', '', '', '', '', '', '', '', '', '', '', '', '', # 64-76
    '', '', '', '', '', '', '', '', '', '', '', '', '', # 77-89
    '!', '#', '$', '%', '&', '(', ')', '*', '+', ',', '-', '/', ':', # 90-102
    ';', '<', '=', '>', '@', '[', '\\',']', '^', '?', '{', '|', '}', # 103-115
    '~', '', 'Ä', 'Å', 'Ç', 'É', 'Ñ', 'Ö', 'Ü', 'á', 'à', 'â');     # 116-127
my %mapz = (); # This guy will hold @valz as keys && indices as values for lookups
    for(my $i=0; $i<@valz; $i++) { $mapz{$valz[$i]} = $i; }
my $numb; my $rslt; my $temp; my $fbas; my $tbas; my $BGIN = 975657600;

sub cnv { # like `cnv` but a sub is much faster w/o fresh shells each call! =)
    $numb = shift || return(0); $rslt = ""; $temp = 0;
    $fbas = $tbas = undef; $fbas = shift; $tbas = shift;
    if (!defined($tbas)) {
        if (!defined($fbas)) {
            if ($numb =~ /^0x/ || ($numb =~ /[A-F]/i && $numb =~ /^-?[0-9A-F]+$/i)) {
                $fbas = 16; $tbas = 10;
            } else { $fbas = 10;    $tbas = 16; }
        } else {     $tbas = $fbas; $fbas = 10; }
    }
    if ($numb =~ /\D/ || $fbas != 10) {
        $temp = reverse($numb); $numb = 0;
        while (length($temp)) {
            $numb += $mapz{substr($temp,-1,1)};
            $numb *= $fbas; chop($temp);
        }
        $numb = int($numb/$fbas);
    }
    while ($numb) {
        $rslt = $valz[$numb%$tbas] . $rslt;
        $numb = int($numb/$tbas);
    }
    return($rslt);
}

sub E2pt2e { # converts passed val either to epoch or pt depending
    $numb = shift || return(0); my $ptoe = ""; my $yeer = 0; my @prtz = ();
    if (0 < length($numb) && length($numb) <= 5) {
        @prtz = split //, $numb; splice(@prtz,5,($#prtz-5)); # chop extras off!
        for(my $i=0; $i<5; $i++) { unless(defined($prtz[$i])) { $prtz[$i] = 0; } }
        $yeer = int((cnv($prtz[0], 64, 10)+11)/12) + 100;
        @prtz = (cnv($prtz[4], 64, 10), cnv($prtz[3], 64, 10), cnv($prtz[2], 64, 10),
            cnv($prtz[1], 64, 10), (cnv($prtz[0], 64, 10)+11)%12, $yeer);
        unless ($prtz[3]) { $prtz[3] = 1; }
        $ptoe = timelocal(@prtz);
    } elsif (5 < length($numb) && length($numb) < 11) {
        @prtz = localtime($numb);
        @prtz = (cnv((int(($prtz[5]-101)*12)+$prtz[4]+1), 64), cnv($prtz[3], 64),
            cnv($prtz[2], 64), cnv($prtz[1], 64), cnv($prtz[0], 64));
        for (my $i=0; $i<6; $i++) { $ptoe .= $prtz[$i] if defined($prtz[$i]); }
    }
    return($ptoe);
}

sub ptcmppt { # compares two pt's, returns "lt", "eq", "gt", || "ne" if parm err
    my $numa = shift || return("ne"); $numb = shift || return("ne");
    my $prsl = "eq"; my @prta = split //, $numa; my @prtb = split //, $numb;
    for (my $i=0; $i<5; $i++) {
        if ($prsl eq "eq" && cnv($prta[$i], 64, 10) < cnv($prtb[$i], 64, 10)) {
            $prsl = "lt";
        } elsif ($prsl eq "eq" && cnv($prta[$i], 64, 10) > cnv($prtb[$i], 64, 10)) {
            $prsl = "gt";
        }
    }
    return($prsl);
}

my @dayo = ( "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sha" );
my %dmap = (); for(my $i=1; $i<=@dayo; $i++) { $dmap{lc($dayo[$i-1])} = $i; }
my @mnth = ( "Jan", "Feb", "Mar", "Apr", "May", "Jun",
             "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" );
my %mmap = (); for(my $i=1; $i<=@mnth; $i++) { $mmap{lc($mnth[$i-1])} = $i; }
my @mdyz = ( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );
my $tout = shift; my $dayv = shift;
if (defined($tout) && defined($dayv) && exists($dmap{lc($tout)}) && exists($mmap{lc($dayv)})) {
    $tout = $dayv; $dayv = shift;
}
my $yerv = shift; my $horv = shift; my $minv = shift; my $secv = shift;
if (defined($yerv) && defined($horv) && $yerv =~ /^\d+:\d+:\d+$/) {
    ($yerv, $horv) = ($horv, $yerv);
}
if (defined($dayv) && defined($yerv) &&
    ($dayv =~ /^c(mp)?$/i || $yerv =~ /^c(mp)?$/i)) {
    if ($dayv =~ /^c(mp)?$/i) { $dayv = $yerv; }
    $yerv = "c";
}
my @time = localtime(); my @fldz = (); my $year = 0;
my @stim = (); my $summ = 0; my $oper = 0;

if (defined($dayv) && defined($yerv) && $dayv =~ /^[+-]$/) {
    $tout .= "$dayv$yerv";
    if (defined($horv)) {
        if ($horv eq "e") { $dayv = "e"; }
        elsif (defined($minv) && $horv =~ /^[+-]$/) {
            $tout .= "$horv$minv";
        }
    }
    if (defined($secv)) {
        if ($secv eq "e") { $dayv = "e"; }
        elsif ($secv =~ /^[+-]$/) {
            $temp = shift;
            if (defined($temp)) { $tout .= "$secv$temp"; }
        }
    }
}
if (!defined($tout) || $tout eq "pt" || exists($mmap{lc($tout)})) {
    $time[5] -= 101;
    $time[4] = ++$time[4]+(12*($time[5]%5)); $time[4] = cnv($time[4], 64);
    $time[5] = int($time[5] / 5); $time[5] = cnv($time[5], 64);
    $time[3] = cnv($time[3], 64); $time[2] = cnv($time[2], 64);
    $time[1] = cnv($time[1], 64); $time[0] = cnv($time[0], 64);
}
if ((defined($tout) && $tout =~ /^(\w+)([+-].+)$/)) { # add/sub pt
#print "$tout=";
    $summ = $1; $tout = $2;
    $summ = E2pt2e($summ) if (length($summ) <= 5);
    while ($tout =~ /^([+-])(\w+)/) {
        $oper = $2; while (length($oper) < 5) { $oper .= "0"; }
        @fldz = split //, reverse($oper);
        @stim = localtime($summ);
        if ($1 eq "+") {
            $stim[0] += cnv($fldz[0], 64);
            while ($stim[0] > 59) { $stim[1]++; $stim[0] -= 60; }
            $stim[1] += cnv($fldz[1], 64);
            while ($stim[1] > 59) { $stim[2]++; $stim[1] -= 60; }
            $stim[2] += cnv($fldz[2], 64);
            while ($stim[2] > 23) { $stim[3]++; $stim[2] -= 24; }
            $stim[3] += cnv($fldz[3], 64);
            while ($stim[3] > $mdyz[$stim[4]]) {
                if ($stim[3] != 29 || $stim[4] != 1 || ($stim[5]%4) != 0) {
                    $stim[3] -= $mdyz[$stim[4]]; $stim[4]++;
                } elsif ($stim[3] > 29) { # ck leap year
                    $stim[3] -= 29; $stim[4]++;
                }
            }
            $stim[4] += (cnv($fldz[4], 64, 10)+11)%12 + 1;
            while ($stim[4] > 11) { $stim[4] -= 12; $stim[5]++ if $fldz[4]; }
            $stim[5] += int((cnv($fldz[4], 64, 10)-1)/12);
        } else {
            $stim[0] -= cnv($fldz[0], 64, 10);
            while ($stim[0] < 0) { $stim[1]--; $stim[0] += 60; }
            $stim[1] -= cnv($fldz[1], 64, 10);
            while ($stim[1] < 0) { $stim[2]--; $stim[1] += 60; }
            $stim[2] -= cnv($fldz[2], 64, 10);
            while ($stim[2] < 0) { $stim[3]--; $stim[2] += 24; }
            $stim[3] -= cnv($fldz[3], 64, 10);
            while ($stim[3] < 0) {
                if ($stim[4] != 2 || ($stim[5]%4) != 0) {
                    $stim[4]--; $stim[3] += $mdyz[$stim[4]];
                } else { # ck leap year
                    $stim[4]--; $stim[3] += 29;
                }
            }
            $stim[4] -= (cnv($fldz[4], 64, 10)+11)%12 + 1;
            while ($stim[4] < 0) { $stim[4] += 12; $stim[5]-- if $fldz[4]; }
            $stim[5] -= int((cnv($fldz[4], 64, 10)-1)/12);
        }
        if (!$stim[3]) { $stim[3]++; print "!EROR! 0days found, adding 1day... "; }
        $summ = timelocal(@stim);
        $tout =~ s/^[+-]\w+//;
    }
    if (defined($dayv)) {
        if ($dayv eq "e")    { print $summ; }
        elsif ($dayv eq "d") { print $summ; }
    } else                   { print E2pt2e($summ); }
#print " ", $summ;
#print " ", scalar localtime($summ);
} elsif (defined($tout)) {
    if (exists($mmap{lc($tout)}) && defined($dayv)) {
        $dayv =~ s/,$//;
        if ($dayv > 1999) { $yerv = $dayv; $dayv = -1; }
        if (defined($yerv)) {
            if ($yerv == 2000 && lc($tout) eq "dec") {
                $yerv = 0;
            } else {
                $yerv -= 2001; $yerv = 2001 if ($yerv < 0 || 6 < $yerv);
                $yerv *= 12; $yerv += $mmap{lc($tout)}; $yerv = cnv($yerv, 64);
            }
            print $yerv;
        }
        if (defined($dayv) && $dayv ne "" && 0 <= $dayv && $dayv < 32) {#32
            print cnv($dayv, 64);
        }
        if (defined($horv)) {
            if ($horv =~ /^(\d+):(\d+):?(\d*)$/) {
                $horv = $1; $minv = $2; $secv = $3;
            }
            if (defined($horv) && $horv ne "" && 0 <= $horv && $horv < 24) {#24
                print cnv($horv, 64);
            }
        }
        if (defined($minv)) {
            $minv =~ s/\D+//g;
            if (defined($minv) && $minv ne "" && 0 <= $minv && $minv < 60) {#60
                print cnv($minv, 64);
            }
        }
        if (defined($secv)) {
            $secv =~ s/\D+//g;
            if (defined($secv) && $secv ne "" && 0 <= $secv && $secv < 60) {
                print cnv($secv, 64);
            }
        }
    } elsif (defined($dayv) && $dayv eq "E") { # convert $tout epoch into pt
        if ($tout =~ /\D/) { print reverse(@time[0..4]); } # if !epoch, cur pt
        elsif (length($tout) <= 5) { print scalar localtime(E2pt2e($tout)); }
        else {               print E2pt2e($tout); }
    } elsif (defined($dayv) && $dayv eq "e") { # convert $tout pt into epoch
        if ($tout eq "pt" || $tout eq "e") { print scalar time(); }
        elsif (length($tout) > 5)  { print scalar localtime($tout); }
        else {                               print E2pt2e($tout); }
    } elsif ($tout eq "e") {
        print scalar localtime();
    } elsif ($tout eq "pt") {
        $tout = "$time[4]$time[3]$time[2]$time[1]$time[0]";
        @time = split //, $tout; splice(@time,5,($#time-5)); # chop extras off!
        for(my $i=0; $i<5; $i++) { unless(defined($time[$i])) { $time[$i] = 0; } }
        $year += 2000 + int((cnv($time[0], 64, 10)+11)/12);
        printf("%s %2d, %4d %02d:%02d:%02d", $mnth[(cnv($time[0], 64, 10)-1)%12],
            cnv($time[1], 64, 10), $year, cnv($time[2], 64, 10),
            cnv($time[3], 64, 10), cnv($time[4], 64, 10));
    } elsif (defined($dayv) && length($dayv) && length($tout) &&
        defined($yerv) && $yerv eq "c") { # compare two pt's
        print ptcmppt($tout, $dayv);
    } else {
        @time = split //, $tout; splice(@time,5,($#time-5)); # chop extras off!
        for(my $i=0; $i<5; $i++) { unless(defined($time[$i])) { $time[$i] = 0; } }
        $year = int((cnv($time[0], 64, 10)+11)/12) + 100;
        @time = (cnv($time[4], 64, 10), cnv($time[3], 64, 10), cnv($time[2], 64, 10),
            cnv($time[1], 64, 10), (cnv($time[0], 64, 10)+11)%12, $year);
        unless ($time[3]) { $time[3] = 1; print "!EROR! 0days found, adding 1day... "; }
        print scalar localtime(timelocal(@time));
    }
} else {
    print reverse(@time[0..4]); # chng to 5 if you want 6 digits
#print "\n", cnv("$time[4]$time[3]$time[2]$time[1]$time[0]", 64, 128);
} # print "\n"; # hmmm...
