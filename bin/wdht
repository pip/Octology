#!/usr/bin/perl
# 5BHJEQ4j:wdht by PipStuart <Pip@CPAN.Org> as a tiny Curses::Simp applic8ion 2 just read the current WiDth && HeighT of the console && print them in the
#   corners of the screen as they change (since my KDE terminalz stopped showing normal tooltipz of resized console text dimensions). 'x' or w8 8secs eXitz;
# Currently setting a sleep after printing the %ENV dimensions && resizing before the Simp object takes over doesn't upd8 either %ENV or Simp correctly.
# It looks like resize events show up as KEY_RESIZE 410 && trigger an upd8 but without support for the use_tioctl(1) in my Curses, I don't think it will
#   work as desired relying solely on use_env() since default was already 1 && could resize somewhat but not upd8 %ENV or internal dimensions either &&
#   disabling it with 0 just gets 80x24 from the terminal d8abase && it doesn't change from there. I can't OpN Simp obj B4 say since \n mkz thM pop on Curses;
# 2du:useReadKey2get strt dimz nstdofENV,tSt4 1ht||smal wd,mk sure not2PrntEscBkspc etc,brk tImout apRt&&Prnt cntdn secs,trySimp wrapz4COLS&&LINES2ck4upd8,
#   clEnout all faild atMptz&&comNtz,mAB shO pxl dimz2,add colrz,add pRamz wi -help;
use strict;use warnings;use utf8;use Curses::Simp;use Term::ReadKey;my $d8VS='J7VMNxwh';my($envw,$envh, $smpw,$smph)=(0,0, 0,0);my($wdht,$keyp);
$envw=$ENV{'COLUMNS'} if(exists($ENV{'COLUMNS'}));$envh=$ENV{'LINES'} if(exists($ENV{'LINES'}));#rint "  $envw",'x',$envh,' %ENV COLUMNSxLINES';
my @text;        my $simp=tie(@text,'Curses::Simp');my($pxlw,$pxlh); #$simp->Move(2,8);$simp->Prnt('TestPrnt');sleep 2;
#ub Upd8WdHt {$smpw=Curses::Simp->COLS();$smph=Curses::Simp->LINES();$wdht=$smpw.'x'.$smph;     print "$wdht "; # COLS&&LINES nstd of Widt&&Hite had no result
#ub Upd8WdHt {chomp($smpw= `tput  cols`);chomp($smph= `tput  lines`);$wdht=$smpw.'x'.$smph;     print "$wdht "; # tput puts starts fine but doesn't upd8 either
# $simp->resizeterm($smph,$smpw);  #system("echo ':$wdht:' >> /tmp/wdht.tst"); # looks lIk I just mIt not have2close && reopen my Simp apps aftr every resizing
#ub Upd8WdHt {$smpw=$simp->Widt();$smph=$simp->Hite();               $wdht=$smpw.'x'.$smph;     print "$wdht "; # '  ',$wdht,' Simp   Widt x Hite';
sub Upd8WdHt {($smpw,$smph, $pxlw,$pxlh)=GetTerminalSize();          $wdht=$smpw.'x'.$smph;     #rint "$wdht "; # Oh yay! It looks like ReadKey actually works!
# for(0..$simp->Hite()-1){$simp->Move($_,0);$simp->Prnt(' ' x $simp->Widt());} # blank old scrEn before Prntz follow with properly upd8d positions? Very close!
# $simp->Hite($smph);$simp->Widt($smpw);#simp->Cler(); # call a single clear() rather than trying to loop lines && Prnt spaces across the entire screen area
# for(0..     $smph   -1){$simp->Move($_,0);$simp->Prnt(' ' x $smpw);} # blank new screen dimensions too before using Prnt to display wdht in corners && center
# for(0..     $smph   -1){$text[      $_  ] =           ' ' x $smpw ;} # $simp->{'_wind'}->clear(); # maybe the bakgrnd printing is the source of residue?
# $simp->{'_widt'}=$smpw;$simp->{'_hite'}=$smph;@text=();$simp->Draw(); # blank tied text && just let it auto-draw? only works well around 80x25, !big tho
# @text=();$simp->ShokScrn('slvl' => 3); # everything I'm trying so far is leaving residue or wrapping strings once I resize terminal beyond 80x24
  $simp->Cler(                                         );$simp->Rsiz($smph,$smpw);
  $simp->Move(          0 ,                          0 );$simp->Prnt($wdht); # rEmMbr Move() takes y,x   # apparently above print can unintuitively B B4 CScr()
  $simp->Move(          0 ,     $smpw-length($wdht)    );$simp->Prnt($wdht); # place dimensions in all corners starting up-left going clockwise, then in center
  $simp->Move(    $smph-1 ,     $smpw-length($wdht)    );$simp->Prnt($wdht); # it seems like printing any newlines before the END show up in Simp nsted of aftr
  $simp->Move(    $smph-1 ,                          0 );$simp->Prnt($wdht); # it seems that COLSxLINS can't upd8 until full control is returned to the shell?
  $simp->Move(int($smph/2),int(($smpw-length($wdht))/2));$simp->Prnt($wdht);}# below wait up to 8seconds for any key press before final printing &&auto-exiting
    Upd8WdHt();  while(!defined($keyp) ||  $keyp ne 'x'){$keyp=$simp->GetK(8); # while keeps looping until 'x' is pressed 2 eXit, but chng2 if for 8second eXit
 #if   ($keyp eq '410'){$simp->Rsiz(-1,-1);#simp->endwin();$simp->refresh(); # resize event but CScr()&&endwin() stil fail2restore normal terminal oper8ion =(
  if   ($keyp eq 'KEY_RESIZE'){$simp->Rsiz(-1,-1);#simp->endwin();$simp->refresh(); # rEsIz EvNt but CScr()&&endwin() stil fail2rEstor normal term oper8ion =(
    Upd8WdHt();} # maybe doupdate() can work instead of refresh()? use_tioctl(1) sounds like the way2go && I think I'm giving up on resize for now without it
  elsif($keyp ne         '-1'){ # try to setup some hot-keys which will call a resize event to my preferred standard dimensions && hopefully upd8 on return
    if   ($keyp=~ /[hlad]/){system("resize -s       $smph " . ++$smpw . " >/dev/null");Upd8WdHt();}
    elsif($keyp=~ /[HLAD]/){system("resize -s       $smph " . --$smpw . " >/dev/null");Upd8WdHt();}
    elsif($keyp=~ /[jksw]/){system("resize -s " . ++$smph   . " $smpw     >/dev/null");Upd8WdHt();}
    elsif($keyp=~ /[JKSW]/){system("resize -s " . --$smph   . " $smpw     >/dev/null");Upd8WdHt();}
    elsif($keyp=~ /[280i]/){system("resize -s 25  80                      >/dev/null");Upd8WdHt();}
    elsif($keyp=~ /[516b]/){system("resize -s 50 160                      >/dev/null");Upd8WdHt();}
    elsif($keyp=~ /[fd34]/){system("resize -s  1  34                      >/dev/null");Upd8WdHt();} # Gnome-Terminal only allows resize to 34x4 without wmctrl
    else                   {   $simp->Move( 1, 1);$simp->Prnt($keyp);}}
  else                     {               $keyp=   'x';}} # hOpfuly also eXit @8secs. Term::ReadKey has ioctl(0,TIOCGWINSZ, &w) too
@text=();$simp->CScr(); # mAB CScr needz2undo some of the OScr optionz before endwin() can restore proper orig term settings && not need yet another `reset`?
# I am really unsure why any explicitly called $simp->CScr() doesn't clean up && endwin() properly (which I'd prefer to happen before printing to the regular
#   terminal again). It needs `reset` after every program exit unless I avoid explicit CScr() && let it presumably just run whenever END block is auto-called.
# Maybe it was trying to double close without checking for still GLBL FLAGOPEN? Seems to not be that. At least printing 1st && not directly calling works now.
print 'strt: ',$envw,'x',$envh,"\n"; #' - '; # trying say here didn't work with the newline without calling CScr 1st (wich sEms2not need reset after right now)
print 'ennd: ',$smpw,'x',$smph;#,' pxlz: ',$pxlw,'x',$pxlh; # try just printing extents once done adjusting && pixelz part sEmz2just retn 0,0 so don't print
# I think it's close enough for now. Hardly any residue left && looking mostly good, but still sometimes losing right corner entries when widening terminal.
