                DMAKE UNPACKING AND INSTALLATION INSTRUCTIONS


We attempt to keep the information presented here accurate.  However, the
defacto location of the most up to date information is the dmake WWW site
found at:

   http://dmake.wticorp.com/

DMAKE is available in several formats:  a compressed tar src archive,
a pkzip src archive, a variety of executable archives.  Refer to the
appropriate section below for unpacking instructions.


1. UNPACKING THE DISTRIBUTION FILES

   OPTION 'A' (compressed tar src archive):
   --------------------------------------
   Assumption:  The current directory contains the latest version of dmake in
		the file 'dm41src.tgz'. 

   This file is a standard GNU zip compressed tar archive.  To unpack the file
   issue the following command.  gunzip is available for most UNIX platforms
   as well as DOS.

	   gunzip -c dm41src.tgz | tar xf -


   OPTION 'B' (src zip archive):
   -----------------------------
   Assumption:  The current directory contains the latest version of DMAKE in
		the file dm41src.zip.

   To unpack the full zip distribution simply use pkunzip with the
   following command:

	   pkunzip dm41src.zip
   or
	   unzip dm41src.zip


   Instructions for unpacking executable only versions are given on the
   dmake WWW site.


2. BUILDING THE EXECUTABLE

   Skip this step if you have purchased a prebuilt binary distribution.

   The only supported method for building a new executable from a fresh or
   patched distribution is to use the self building scripts rather than DMAKE
   itself.  This is necessary in order to allow for the use of new DMAKE
   features and functionality in the DMAKE 'makefile' itself.  Once built
   the DMAKE executable can be used to rebuild DMAKE.

   To determine the set of supported environments issue the following
   commands:

	cd src
	make

   The output of this command will be a set of arguments representing the
   supported environments that DMAKE can be compiled in.  Choose the one
   that most closely represents your environment and issue the command:

	make environ_tag

   where 'environ_tag' is from the previous list, for example on a Solaris
   System the option is Solaris, so you would issue the command 'make Solaris'.

   The script runs the appropriate set of commands; upon completion the file
   'dmake' or 'dmake.exe' is found in the current directory.
   This is the binary executable.

   Note: before issuing the build command please read Section 3 and decide
   if you need or want to modify the pre-compiled value of MAKESTARTUP.

   During the build it is safe to ignore any warnings that may
   be generated by your build.  If you get errors from the build then
   it is probably the case that you have chosen a build target that is
   not compatible with your environment.


3. INSTALLING AND CONFIGURING THE EXECUTABLE

   To install the dmake executable place the executable into the
   location where your system normally finds executables.  That is
   place dmake into a subdirectory that is or will be in your
   executable search PATH.

   You can now issue the command 'dmake -V'; the output will be
   similar to:

      dmake - Copyright (c) 1990,...,1996 by Dennis Vadura, Version 4.10, PL 0

      Default Configuration:
	 MAXPROCESSLIMIT := 10
	 MAXLINELENGTH := 8190
	 .IMPORT .IGNORE: ROOTDIR
	 .MAKEFILES : makefile.mk Makefile makefile
	 .SOURCE    : .NULL
	 MAKESTARTUP := $(ROOTDIR)/usr/local/lib/dmake/startup/startup.mk

      Please read the file readme/release for the latest release notes.


   Take note of the line defining the value of MAKESTARTUP; to configure
   the executable you must perform two steps:

	1. Copy the <dmake-distdir>/startup subtree to a suitable location,
	2. Tell dmake where you put it,


   Step 1:
   -------
   The above example build of dmake assumes that the directory path (assuming
   ROOTDIR is NULL)

        /usr/local/lib/dmake/

   is a directory which contains a copy of the "<dmake-distdir>/startup" 
   subtree.  Thus to properly configure dmake so that the precompiled
   defaults would be used you would have to perform the following:

        cd <dmake-distdir>
	mkdir /usr/local/lib/dmake
	cp -r startup /usr/local/lib/dmake

   or if you are in the MSDOS or Windows-95/NT world:

	cd <dmake-distdir>
	md \usr\local\lib\dmake
	xcopy startup \usr\local\lib\dmake

   and you are done Step 1.


   Step 2:
   -------
   You must tell dmake where it is that you placed the "startup" subtree.  If
   the location is the directory that is pre-compiled into dmake then you
   are done.  If the directory where you copied the dmake subtree is not the
   precompiled value you must either set the global environment variable
   MAKESTARTUP to point at the new location of "startup/startup.mk" or you
   must rebuild dmake with a new precompiled value of MAKESTARTUP.  To do the
   latter create the file:

	src/startup.h

   and make sure that it contains an entry similar to the following:

     /* This file contains the default value of the MAKESTARTUP variable.
      * You must set the quoted string below to the default path to the startup
      * variable, so that it gets compiled in.  LEAVE ROOTDIR at the front of
      * the path.  This allows the user to customize his environment for dmake
      * by setting up a new ROOTDIR environment variable. */

     "MAKESTARTUP := $(ROOTDIR)/usr/local/lib/dmake/startup/startup.mk",

   (See src/msdos/startup.h for an example).  Once set properly rerun your
   previous build.  In the rare instance that your compiler has broken
   #include search rules, the shipped "startup.h" files are located in
   architecture specific subdirectories as described in the file
   "readme/srcorg".


4. DMAKE SPECIFIC ENVIRONMENT VARIABLES 

   Once you have built dmake, the dmake startup directory contains the file
   "config.mk".  This file contains definitions corresponding to your installed
   target environment for the variables:

	OS            - Specifies the flavour of operating system.
	OSRELEASE     - Specifies the particular version of the operating
		        system.
	OSENVIRONMENT - An optional configuration parameter for the operating
			system release.

   Appropriate values for these variables are found in the

  	<install-dir>/startup/templates/<OS>/<OSRELEASE>/<OSENVIRONMENT>/template.mk

   file.  Select the OS, OSRELEASE, and OSENVIRONMENT that best suits your
   setup (check readme.1st) for hints on selecting the most appropriate
   settings.

   These three variables are used to determine the correct dmake configuration
   when dmake starts up, and loads its builtin definitions from the startup
   subtree hierarchy.  The only time you should have a need to change these
   values or the contents of the startup subtree is when you wish to supply
   your own customized default environment or you are building dmake for a
   new as yet unsupported target environment.


5. LOCALE SPECIFIC CONFIGURATION

   Locale specific macro definitions that are not part of the predefined macro
   set should be placed into the file "startup/local.mk".  This ensures that
   future dmake releases will not overwrite your prior definitions.  We
   guarantee that the file "startup/local.mk" will never be part of any future
   dmake distribution.


